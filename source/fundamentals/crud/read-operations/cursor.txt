.. _cursor-golang:

=========================
Access Data From a Cursor
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to access data with a **cursor**.

A cursor is a mechanism that allows an application to iterate over
database results while holding a subset of them in memory at a given
time. The Go driver uses a cursor in some read operations to return
matched documents in batches as opposed to all at once.

Retrieve Sample Data
~~~~~~~~~~~~~~~~~~~~

Each section assumes you retrieve all the documents in your collection
with the ``Find()`` function.

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin find
   :end-before: end find

Access Cursor Elements
----------------------

You can access a cursors elements before it's **exhausted**. A cursor is
exhausted when the ``MongoClient`` iterates through its results and
reaches its last element. Afterwards, the cursor won't respond to
functions to access its elements.

.. important::

   A cursor is not goroutine safe. Do not use the same cursor in
   multiple goroutines at the same time.

Current Document
~~~~~~~~~~~~~~~~

When :ref:`iterating through your cursors results
<cursor-iteration-golang>`, you can view each document as a ``BSON`` or
Go value.

BSON
````

To access the current document as raw ``BSON``, use the ``Current``
property.

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin current
   :end-before: end current

Go Value
````````

To access the current document as a Go value, use the ``Decode()``
function. 

This function unmarshals the current document into the :ref:`BSON
interface <bson-types>` you specify. It returns any errors from the
unmarshalling process without any modification.

.. code-block:: go

   var result bson.D
   if err := cursor.Decode(&result); err != nil {
      log.Fatal(err)
   }
   fmt.Println(result)

Remaining Batch Length
~~~~~~~~~~~~~~~~~~~~~~

To retrieve the amount of documents remaining in the current batch, use
the ``RemainingBatchLength()`` function.

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin remaining batch length
   :end-before: end remaining batch length

.. note::

   If the amount is ``0`` and you call the ``Next()`` or ``TryNext()``
   function, it performs a network request to fetch the next batch.

Cursor ID
~~~~~~~~~

To retrieve the ID of the cursor, use the ``ID()`` function. 

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin id
   :end-before: end id

.. important::

   Include the option to set your batch size. The batch size needs to be
   a number less than or equal to the number of documents you expect to
   retrieve for a valid cursor ID. If you omit this option, set the
   batch size to greater than the elements retrieved, or the
   ``MongoClient`` exhausts the cursor, the cursor ID is ``0``.
   
   .. code-block:: go
      
      opts := options.Find().SetBatchSize(<a number>)
      cursor, err := coll.Find(context.TODO(), bson.D{}, opts)
      if err != nil {
         panic(err)
      }

Errors
~~~~~~

To retrieve the last error the cursor encountered, use the ``Err()``
function. The error is ``nil`` if no errors occurred.

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin err
   :end-before: end err

.. _cursor-iteration-golang:

Usage Patterns
--------------

A cursor allows you to access query results one document at a time,
abstracting away network and caching logic. 

.. note::
   
   If you previously used the cursor to iterate some documents, the
   driver excludes those documents when you iterate again. 

Functional Iteration
~~~~~~~~~~~~~~~~~~~~

To iterate through all results, use the ``All()`` function. 

This function unmarshals all the documents stored in a cursor into an
array at the same time. ``All()`` makes your cursor non-tailable. This
means that the cursor automatically closes after the ``MongoClient``
exhausts it.

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin cursor all
   :end-before: end cursor all

Manual Iteration
~~~~~~~~~~~~~~~~

To iterate through each result or to purposely wait for the next
available document, use the ``Next()`` function. 

.. tip::

   While going through each result, you can further specify how you want
   the documents printed though the find operations options. 

This function blocks the current goroutine until a document is
available, an error occurs, or the context expires. It returns ``true``
if no errors occur and the ``MongoClient`` didn't exhaust the cursor.
Otherwise, the function returns ``false``.

``Next()`` makes your cursor tailable. This means that the cursor
remains open after the ``MongoClient`` exhausts it.
   

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin cursor next
   :end-before: end cursor next

Attempt Next
````````````

Alternatively, you can use the ``TryNext()`` function.

This function attempts to retrieve the next document in a cursor. It's
non-blocking, which means it returns ``false`` if the ``MongoClient``
exhausts the cursor, an error occurs, the next document isn't available
or the context expires. Otherwise, the function returns ``true``.

``TryNext()`` makes your cursor tailable. This means that the cursor
remains open after the ``MongoClient`` exhausts it.

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin cursor try next
   :end-before: end cursor try next

Cursor Cleanup
--------------

To free up a cursor's consumption of resources in both the client
application and the MongoDB server, use the ``Close()`` function. 

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin close
   :end-before: end close

Additional Information
----------------------

For more information on the operations discussed in this guide, see the
following guides:

- :ref:`<retrieve-golang>`
- :ref:`<query_document_golang>`
- :ref:`<bson-golang>`
- :manual:`Tailable Cursors </core/tailable-cursors/>`

.. - Fundamentals > BSON page

API Documentation
~~~~~~~~~~~~~~~~~

For more information on any of the functions or types discussed in this
guide, see the following API Documentation:

- `Cursor <{+api+}/mongo#Cursor>`__
- `Cursor.Decode() <{+api+}/mongo#Cursor.Decode>`__
- `Cursor.RemainingBatchLength() <{+api+}/mongo#Cursor.RemainingBatchLength>`__
- `Cursor.ID() <{+api+}/mongo#Cursor.ID>`__
- `Cursor.Err() <{+api+}/mongo#Cursor.Err>`__
- `Cursor.All() <{+api+}/mongo#Cursor.All>`__
- `Cursor.Next() <{+api+}/mongo#Cursor.Next>`__
- `Cursor.TryNext() <{+api+}/mongo#Cursor.TryNext>`__
- `Cursor.Close() <{+api+}/mongo#Cursor.Close>`__
